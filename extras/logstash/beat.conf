# https://www.elastic.co/guide/en/logstash/current/plugins-inputs-beats.html
input {
  beats {
    port => 5044
  }
}

filter {
  if [service][type] == "traefik" and [fileset][name] == "access" {
    json { source => "message" }
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
    if [RouterName] =~ /.+/ {
      mutate {
        replace => { "message" => "%{time} [%{DownstreamStatus}] %{ClientHost} - %{RouterName}: %{RequestMethod} %{RequestPath}" }
#        replace => { "message" => "%{[app][id]} %{time} [%{DownstreamStatus}] %{ClientHost} - %{RouterName}: %{RequestMethod} %{RequestPath}" }
      }
    } else {
      mutate {
        replace => { "message" => "%{time} [%{DownstreamStatus}] %{ClientHost} - %{RequestAddr}: %{RequestMethod} %{RequestPath}" }
#        replace => { "message" => "%{[app][id]} %{time} [%{DownstreamStatus}] %{ClientHost} - %{RequestAddr}: %{RequestMethod} %{RequestPath}" }
      }
    }
    geoip {
      source => "ClientHost"
      target => "source"
    }
    mutate { remove_field => ["time"] }
  } else if [service][type] == "nginx" {
    if [fileset][name] == "access" {
      grok {
        match => { "message" => ["%{IPORHOST:ip} - %{DATA:user_name} \[%{HTTPDATE:time}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:body_sent_bytes} \"%{DATA:referrer}\" \"%{DATA:user_agent}\""] }
        remove_field => "message"
      }
      date {
        match => ["time", "dd/MMM/YYYY:HH:mm:ss Z"]
        target => "@timestamp"
      }
      geoip {
        source => "ip"
      }
      if "_grokparsefailure" in [tags] {
        drop {}
      } else {
        ruby { code =>'event.set("time", Time.at(event.get("@timestamp").to_f).strftime("%Y-%m-%d %H:%M"))' }
        mutate { replace => { "message" => "%{time} [%{response_code}] '%{http_method} %{url} HTTP/%{http_version}' %{body_sent_bytes} '%{referrer}' '%{user_agent}'" } }
#         mutate { replace => { "message" => "%{[app][id]} %{time} [%{response_code}] '%{http_method} %{url} HTTP/%{http_version}' %{body_sent_bytes} '%{referrer}' '%{user_agent}'" } }
      }
      mutate {
        add_field => {
          "[event][kind]" => "event"
          "[event][category]" => "log"
        }
        remove_field => ["time"]
      }
    } else if [fileset][name] == "error" {
      grok {
        match => { "message" => ["%{DATA:time} \[%{DATA:level}\] %{NUMBER:pid}#%{NUMBER:tid}: %{GREEDYDATA:msg}"] }
      }
      date {
        match => ["time", "YYYY/MM/dd HH:mm:ss"]
        target => "@timestamp"
      }
      if "_grokparsefailure" in [tags] {
        drop {}
      } else {
        mutate { uppercase => [ "level" ] }
        ruby { code =>'event.set("time", Time.at(event.get("@timestamp").to_f).strftime("%Y-%m-%d %H:%M"))' }
        mutate { replace => { "message" => "%{time} [%{level}] %{msg}" } }
#         mutate { replace => { "message" => "%{[app][id]} %{time} [%{level}] %{msg}" } }
        mutate { lowercase => ["level"] }
      }
      mutate {
        add_field => {
          "[event][kind]" => "event"
          "[event][category]" => "log"
        }
        remove_field => ["time", "msg"]
      }
    }
  } else if [service][type] == "kibana" {
# https://github.com/elastic/logstash/blob/v1.4.0/patterns/grok-patterns    
    grok { match => { "message" => "^%{TIMESTAMP_ISO8601:time} \[%{LOGLEVEL:level}%{SPACE}\]\[%{DATA:logger}\] (?m)%{GREEDYDATA:msg}$" } }
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    if "_grokparsefailure" in [tags] {
      drop {}
    } else {
      ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
      mutate { replace => { "message" => "%{time} [%{level}][%{logger}] %{msg}" } }
#       mutate { replace => { "message" => "%{[app][id]} %{time} [%{level}][%{logger}] %{msg}" } }
      mutate { lowercase => ["level"] }
    }
    mutate {
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "log"
      }
      remove_field => ["msg", "time"]
    }
  } else if [service][type] == "elasticsearch" and [fileset][name] == "gc" {
# https://github.com/elastic/logstash/blob/v1.4.0/patterns/grok-patterns    
    grok { match => { "message" => "\[%{TIMESTAMP_ISO8601:time}\]\[%{NUMBER:num}\]\[%{DATA:gc}%{SPACE}\] %{GREEDYDATA:msg}" } }
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
    mutate { replace => { "message" => "%{time} [%{num}][%{gc}] %{msg}" } }
#    mutate { replace => { "message" => "%{[app][id]} %{time} [%{num}][%{gc}] %{msg}" } }
    mutate {
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "log"
      }
      remove_field => ["msg", "time"]
    }
  } else if [service][type] == "system" and [fileset][name] == "auth" {
    grok {
      match => {
        "message" => [
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][dropped_ip]}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\[%{POSINT:[system][auth][pid]}\])?: \s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\[%{POSINT:[system][auth][pid]}\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\[%{POSINT:[system][auth][pid]}\])?: new user: name=%{DATA:[system][auth][user][add][name]}, UID=%{NUMBER:[system][auth][user][add][uid]}, GID=%{NUMBER:[system][auth][user][add][gid]}, home=%{DATA:[system][auth][user][add][home]}, shell=%{DATA:[system][auth][user][add][shell]}$",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} %{DATA:[system][auth][program]}(?:\[%{POSINT:[system][auth][pid]}\])?: %{GREEDYMULTILINE:[system][auth][message]}"]
      }
      pattern_definitions => {
        "GREEDYMULTILINE"=> "(.|\n)*"
      }
    }
    if [system][auth][ssh][ip] =~ /.+/ {
      geoip {
        source => "[system][auth][ssh][ip]"
        target => "client"
      }
    }
    date {
      match => [ "[system][auth][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      timezone => "UTC"
    }
    mutate {
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "log"
      }
    }
  } else if [log][file][path] =~ /traefik/ {
    kv { remove_char_value => "\"" }
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
    mutate { gsub => [ "msg", "\\n", " " ] }
    mutate { uppercase => [ "level" ] }
    mutate {
    replace => { "message" => "%{time} [%{level}] %{msg}" }
#    replace => { "message" => "%{[app][id]} %{time} [%{level}] %{msg}" }
    }
    mutate {
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "log"
      }
      lowercase => ["level"]
      remove_field => ["time", "msg"]
    }
    if [event][dataset] !~ /.+/ {
      mutate {
        add_field => { "[event][dataset]" => "traefik.error" }
      }
    }
  }
}

# https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html
output {
  elasticsearch {
    hosts => ["https://es01.${APP_NET}:${ES_PORT}"]
# data stream is enabled by default
#     data_stream => true
    ssl => true
    ssl_certificate_verification => false
    cacert => ["${ELASTIC_SSL_CERTIFICATEAUTHORITY}"]
    user => "${LOGSTASH_USERNAME}"
    password => "${LOGSTASH_PASSWORD}"
  }
}
